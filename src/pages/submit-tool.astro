---
import Layout from '../layouts/Layout.astro';

const categories = [
  "Language Models",
  "Image Generation",
  "Code Assistance",
  "Audio Generation",
  "Video Generation",
  "Data Analysis"
];

const pricingOptions = [
  "Free",
  "Freemium",
  "Paid",
  "Enterprise"
];
---

<Layout title="Submit AI Tool">
  <div class="max-w-2xl mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-900 mb-8">Submit an AI Tool</h1>
    
    <form
      x-data="{
        formData: {
          name: '',
          description: '',
          category: '',
          pricing: '',
          websiteUrl: '',
          image: null
        },
        imagePreview: null,
        isSubmitting: false,
        errorMessage: '',
        successMessage: '',
        
        handleImageUpload(event) {
          const file = event.target.files[0];
          if (file) {
            if (file.size > 5 * 1024 * 1024) {
              this.errorMessage = 'Image size must be less than 5MB';
              event.target.value = '';
              return;
            }
            this.formData.image = file;
            const reader = new FileReader();
            reader.onload = (e) => {
              this.imagePreview = e.target.result;
            };
            reader.readAsDataURL(file);
          }
        },
        
        async submitForm() {
          try {
            this.isSubmitting = true;
            this.errorMessage = '';
            this.successMessage = '';
            
            const formData = new FormData();
            
            // Validate required fields
            const required = ['name', 'description', 'category', 'pricing', 'websiteUrl'];
            for (const field of required) {
              if (!this.formData[field]) {
                throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required`);
              }
              formData.append(field, this.formData[field]);
            }
            
            // Append image if exists
            if (this.formData.image) {
              formData.append('image', this.formData.image);
            }
            
            const response = await fetch('/api/submit-tool', {
              method: 'POST',
              body: formData
            });
            
            const result = await response.json();
            
            if (!response.ok) {
              throw new Error(result.error || 'Submission failed');
            }
            
            this.successMessage = result.message;
            // Reset form
            this.formData = {
              name: '',
              description: '',
              category: '',
              pricing: '',
              websiteUrl: '',
              image: null
            };
            this.imagePreview = null;
            
            // Redirect after success
            setTimeout(() => {
              window.location.href = '/directory?submitted=true';
            }, 2000);
          } catch (error) {
            console.error('Error submitting form:', error);
            this.errorMessage = error instanceof Error ? error.message : 'Failed to submit the tool. Please try again.';
          } finally {
            this.isSubmitting = false;
          }
        }
      }"
      @submit.prevent="submitForm"
      class="space-y-6 bg-white p-6 rounded-lg shadow-sm"
    >
      <!-- Error/Success Messages -->
      <div x-show="errorMessage" x-cloak 
        class="bg-red-50 text-red-700 p-4 rounded-md"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
      >
        <p x-text="errorMessage"></p>
      </div>
      
      <div x-show="successMessage" x-cloak
        class="bg-green-50 text-green-700 p-4 rounded-md"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
      >
        <p x-text="successMessage"></p>
      </div>

      <!-- Tool Name -->
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
          Tool Name *
        </label>
        <input
          type="text"
          id="name"
          x-model="formData.name"
          class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          required
        />
      </div>

      <!-- Description -->
      <div>
        <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
          Description *
        </label>
        <textarea
          id="description"
          x-model="formData.description"
          rows="4"
          class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          required
        ></textarea>
      </div>

      <!-- Category -->
      <div>
        <label for="category" class="block text-sm font-medium text-gray-700 mb-1">
          Category *
        </label>
        <select
          id="category"
          x-model="formData.category"
          class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          required
        >
          <option value="">Select a category</option>
          {categories.map(category => (
            <option value={category}>{category}</option>
          ))}
        </select>
      </div>

      <!-- Pricing -->
      <div>
        <label for="pricing" class="block text-sm font-medium text-gray-700 mb-1">
          Pricing Model *
        </label>
        <select
          id="pricing"
          x-model="formData.pricing"
          class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          required
        >
          <option value="">Select pricing model</option>
          {pricingOptions.map(option => (
            <option value={option}>{option}</option>
          ))}
        </select>
      </div>

      <!-- Website URL -->
      <div>
        <label for="websiteUrl" class="block text-sm font-medium text-gray-700 mb-1">
          Website URL *
        </label>
        <input
          type="url"
          id="websiteUrl"
          x-model="formData.websiteUrl"
          class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          required
        />
      </div>

      <!-- Image Upload -->
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">
          Tool Image
        </label>
        <div class="mt-1 flex items-center space-x-4">
          <div
            x-show="imagePreview"
            class="w-20 h-20 rounded-lg overflow-hidden bg-gray-100"
          >
            <img
              x-bind:src="imagePreview"
              alt="Preview"
              class="w-full h-full object-cover"
            />
          </div>
          <div
            x-show="!imagePreview"
            class="w-20 h-20 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center"
          >
            <svg class="w-8 h-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
          <div class="flex-1">
            <input
              type="file"
              @change="handleImageUpload"
              accept="image/*"
              class="sr-only"
              id="image-upload"
            />
            <label
              for="image-upload"
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 cursor-pointer"
            >
              Choose Image
            </label>
            <p class="mt-1 text-xs text-gray-500">
              Optional. Max 5MB. If not provided, we'll generate a screenshot of your tool's website.
            </p>
          </div>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="flex items-center justify-end space-x-4 pt-4">
        <button
          type="button"
          class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-900"
          onclick="window.history.back()"
          :disabled="isSubmitting"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
          :disabled="isSubmitting"
        >
          <span x-show="!isSubmitting">Submit Tool</span>
          <span x-show="isSubmitting">Submitting...</span>
        </button>
      </div>
    </form>
  </div>
</Layout>

<script>
  import 'alpinejs';
</script>

<style>
  [x-cloak] {
    display: none !important;
  }
</style>